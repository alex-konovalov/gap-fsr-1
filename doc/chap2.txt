  
  [1X2 [33X[0;0YFSR (Feedback Shift Register)[133X[101X
  
  
  [1X2.1 [33X[0;0YCommon functionality[133X[101X
  
  [33X[0;0YWe  define  an  object  [5XFSR[105X (Feedback Shift Register), which can come in two
  flavours:  with  linear  feedback  [2XLFSR[102X ([14X2.2-1[114X) and nonlinear feedback [2XNLFSR[102X
  ([14X2.3-2[114X).  Because  of  many  similarities  between the two, the basic common
  functionality  can  be found here, while specialized functions (such as [10XLFSR[110X
  and [10XNLFSR[110X object creation) in corresponding sections.[133X
  
  [1X2.1-1 IsFSR[101X
  
  [29X[2XIsFSR[102X[32X filter
  
  [33X[0;0YThis  is  the  category of [10XFSR[110X objects. Objects in this category are created
  using functions [2XLFSR[102X ([14X2.2-1[114X) or [2XNLFSR[102X ([14X2.3-2[114X).[133X
  
  [1X2.1-2 FieldPoly[101X
  
  [29X[2XFieldPoly[102X( [3Xfsr[103X ) [32X attribute
  [29X[2XUnderlyingField[102X( [3Xfsr[103X ) [32X attribute
  [29X[2XFeedbackVec[102X( [3Xfsr[103X ) [32X attribute
  [29X[2XOutputTap[102X( [3Xfsr[103X ) [32X attribute
  
  [33X[0;0Y[10XFieldPoly[110X of the [3Xfsr[103X stores the irreducible polynomial used to construct the
  extension field or 1 in case of a prime field.[133X
  
  [33X[0;0Y[10XUnderlyingField[110X of the [3Xfsr[103X is the finite field over which the [3Xfsr[103X is defined
  (all indeterminates and constants are from this field).[133X
  
  [33X[0;0YNOTE:  it  may  seem  redundant  to sore both [10XFieldPoly[110X and [10XUnderlyingField[110X,
  however, they are used by other functions in the package.[133X
  
  [33X[0;0Y[10XFeedbackVec[110X  of  the [3Xfsr[103X stores the coefficients of the [10XCharPoly[110X without its
  leading  term  in  case  of  [10XLFSR[110X, and coefficients of the nonzero monomials
  present in the multivariate function defining the feedback in case of [10XNLFSR[110X.[133X
  
  [33X[0;0Y[10XOutputTap[110X  holds the output tap position(s): the sequence elements are taken
  from the stage(s) listed in [10XOutputTap[110X.[133X
  
  [1X2.1-3 Length[101X
  
  [29X[2XLength[102X( [3Xfsr[103X ) [32X attribute
  [29X[2XInternalStateSize[102X( [3Xfsr[103X ) [32X attribute
  [29X[2XThreshold[102X( [3Xfsr[103X ) [32X attribute
  
  [33X[0;0Y[10XLength[110X of the [3Xfsr[103X is the number of its stages.[133X
  
  [33X[0;0Y[10XInternalStateSize[110X  of  the  [3Xfsr[103X  is  size  in bits needed to store the state
  [22Xlength â‹… width[122X, where [22Xwidth = DegreeOverPrimeField(UnderlyingField([3Xfsr[103X))[122X.[133X
  
  [33X[0;0Y[10XThreshold[110X  of  the  [3Xfsr[103X  is  currently set to [22XCharacteristic([3Xfsr[103X)^t+â„“[122X, where
  [22Xt=InternalStateSize([3Xfsr[103X)[122X and [22Xâ„“=Length([3Xfsr[103X)[122X.[133X
  
  [1X2.1-4 ChangeBasis[101X
  
  [29X[2XChangeBasis[102X( [3Xfsr[103X, [3XB[103X ) [32X method
  [29X[2XWhichBasis[102X( [3Xfsr[103X ) [32X method
  
  [33X[0;0Y[10XChangeBasis[110X allows changing the basis of the [3Xfsr[103X to basis [3XB[103X. Basis B must be
  given for [10XUnderlyingField(fsr)[110X over its prime subfield.[133X
  
  [33X[0;0Y[10XWhichBasis[110X  returns the basis currently set for the [3Xfsr[103X. Elements in the [3Xfsr[103X
  state  are still represented in GAP native representation, but the functions
  with  basis  switch turned on will print the elements w.r.t to currently set
  basis.[133X
  
  [1X2.1-5 LoadFSR[101X
  
  [29X[2XLoadFSR[102X( [3Xfsr[103X, [3Xist[103X ) [32X method
  
  [33X[0;0YLoading  the  [3Xfsr[103X  with the initial state [3Xist[103X, which is a [3XFFE[103X vector of same
  length  as [3Xfsr[103X and with elements from its underlying finite field. If either
  of  those  two  requirements  is  violated,  loading fails and error message
  appears.  At  the  time  of loading the initial sequence elements (ie zeroth
  elements) are obtained and [10Xnumsteps[110X is set to 0.[133X
  
  [1X2.1-6 StepFSR[101X
  
  [29X[2XStepFSR[102X( [3Xfsr[103X[, [3Xelm[103X] ) [32X method
  
  [33X[0;0YPerform one step the [3Xfsr[103X, ie. compute the new [10Xstate[110X and update the [10Xnumsteps[110X,
  then output the elements denoted by [10XOutputTap[110X. If the optional parameter [3Xelm[103X
  is  used  then the new element is computed as a sum of computed feedback and
  [3Xelm[103X. Elemen [3Xelm[103X must be an element of the underlying finite field.[133X
  
  [33X[0;0YAs  this  is  a way to destroy the linearity of an [10XLFSR[110X, we refer to [10XStepFSR[110X
  with  the  optiomal  nonzero [3Xelm[103X as [10Xnonlinear step[110X. Similarly, the [10XNLFSR[110X can
  also have an extra element added to the (already nonlinear) feedback.[133X
  
  [33X[0;0YReturns an error if the [3Xfsr[103X is not loaded![133X
  
  [1X2.1-7 RunFSR[101X
  
  [29X[2XRunFSR[102X( [3Xfsr[103X[, [3Xist[103X, [3Xnum[103X, [3Xpr[103X] ) [32X method
  [29X[2XRunFSR[102X( [3Xfsr[103X, [3Xelm[103X[, [3Xnum[103X, [3Xpr[103X] ) [32X method
  [29X[2XRunFSR[102X( [3Xfsr[103X, [3Xist[103X, [3Xelmvec[103X[, [3Xpr[103X] ) [32X method
  [29X[2XRunFSR[102X( [3Xfsr[103X, [3Xz[103X, [3Xelmvec[103X[, [3Xpr[103X] ) [32X method
  [6XReturns:[106X  [33X[0;10YA sequence of elements generated by [10XFSR[110X.[133X
  
  [33X[0;0YThe  [3Xfsr[103X  will  be  run for [22Xmin([3Xnum[103X , Threshold([3Xfsr[103X))[122X number of steps: value
  Threshold([3Xfsr[103X)  is  used  by  all versions without explicit [3Xnum[103X and enforced
  when  [3Xnum[103X  exceeds  Threshold([3Xfsr[103X). There is an optional printing switch [3Xpr[103X,
  with  default  set  to [13Xfalse[113X; if [13Xtrue[113X then the state and the output sequence
  element(s)  are  printed in [5XGAP[105X shell on every step of the [3Xfsr[103X (we call this
  output for [10XRunFSR[110X), and the currently set basis [3XB[103X is used for representation
  of elements.[133X
  
  [30X    [33X[0;6Y[10XRunFSR([3X   fsr[,   num,  pr]  [103X[10X)[110X  -  run  [3Xfsr[103X  for  [3Xnum[103X/[3Xthreshold[103X  steps
        with/without output[133X
  
  [30X    [33X[0;6Y[10XRunFSR([3X  fsr,  ist[,  num, pr] [103X[10X)[110X - load [3Xfsr[103X with [3Xist[103X, then run [3Xfsr[103X for
        [3Xnum[103X/[3Xthreshold[103X steps with/without output (ie. [13Xlinear[113X version)[133X
  
  [30X    [33X[0;6Y[10XRunFSR([3X  fsr,  elm[,  num,  pr]  [103X[10X)[110X  - run [3Xfsr[103X for [3Xnum[103X/[3Xthreshold[103X steps,
        whereby  the  SAME  element [3Xelm[103X is added to the feedback at each step,
        with/without output (ie. [13Xnon-linear[113X version)[133X
  
  [30X    [33X[0;6Y[10XRunFSR([3X fsr, ist, elmvec[, pr] [103X[10X)[110X - load [3Xfsr[103X with [3Xist[103X, then run [3Xfsr[103X for
        [13XLength([3Xelmvec[103X)[113X  steps,  whereby  one element of [3Xelmvec[103X is added to the
        feedback  at  each step (starting with [3Xelmvec[1][103X), with/without output
        (ie.  [13Xnon-linear[113X  version).  NOTE:  the  sequence  returned has length
        [13XLength(elmvec)+1[113X,  because  the zeroth sequence element is returned at
        the time of loading the [10XFSR[110X.[133X
  
  [30X    [33X[0;6Y[10XRunFSR([3X  fsr, z, elmvec[, pr] [103X[10X)[110X - input [3Xz[103X must be set to 0 to indicate
        we  want to continue a run with new [3Xelmvec[103X: run [3Xfsr[103X for [13XLength([3Xelmvec[103X)[113X
        steps,  whereby one element of [3Xelmvec[103X is added to the feedback at each
        step  (starting  with  [3Xelmvec[1][103X), with/without output (ie. [13Xnon-linear[113X
        version). NOTE: the sequence returned has length [13XLength(elmvec)[113X.[133X
  
  [33X[0;0YFor  the  load  and  run  versions,  element  seq[22X_0[122X  is a part of the output
  sequence,     hence     the     output     sequence     has    the    length
  [3Xnum+1[103X/[3Xthreshold+1[103X/[3XLength(elmvec)+1[103X.[133X
  
  [33X[0;0YFor  versions without the loading of [3Xist[103X, calling [10XRunFSR[110X returns an error if
  the [3Xfsr[103X is not loaded![133X
  
  [33X[0;0YThe ouput of [10XRunFSR[110X is:[133X
  
  [30X    [33X[0;6Ysequence of [3XFFE[103Xs : seq[22X_0[122X, seq[22X_1[122X, seq[22X_2[122X, [22Xdots ,[122X for [13XLength[113X([13XOutputTap[113X)=1[133X
  
  [30X    [33X[0;6Ysequence  of  vectors, each of them with [22Xt[122X [3XFFE[103Xs : seq[22X_0[122X, seq[22X_1[122X, seq[22X_2[122X,
        [22Xdots ,[122X where seq[22X_i=([122X seq[22X_i1[122X, [22Xdots ,[122X seq[22X_it[122X) for [13XLength[113X([13XOutputTap[113X)=t[133X
  
  [33X[0;0YExample  of  [10XRunFSR[110X  called  for an lfsr [13Xtest[113X over [22XF_2^4[122X, with initial state
  [13Xist[113X, print switch [13Xtrue[113X for basis [13XB[113X, with run length 5:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[28X[128X[104X
    [4X[25Xgap>[125X [27XK := GF(2);; x := X(K, "x");;[127X[104X
    [4X[25Xgap>[125X [27Xf := x^4 + x^3 + 1;; F := FieldExtension(K, f);; B := Basis(F);;[127X[104X
    [4X[25Xgap>[125X [27Xy := X(F, "y");; l := y^4+ y+ Z(2^4);;[127X[104X
    [4X[25Xgap>[125X [27Xtest := LFSR(K, f, l);;[127X[104X
    [4X[28X< empty LFSR given by CharPoly = y^4+y+Z(2^4)>[128X[104X
    [4X[25Xgap>[125X [27Xist :=[0*Z(2), Z(2^4), Z(2^4)^5, Z(2)^0 ];;[127X[104X
    [4X[25Xgap>[125X [27XRunFSR(test, ist, 5, true);             [127X[104X
    [4X[28Xusing basis B := [ Z(2)^0, Z(2^4)^7, Z(2^4)^14, Z(2^4)^6 ]	[128X[104X
    [4X[28Xelm			[ 3,	...	...,0 ]  with taps  [ 0 ][128X[104X
    [4X[28X  [ [ 0, 0, 0, 0 ], [ 0, 1, 1, 0 ], [ 1, 1, 0, 1 ], [ 1, 0, 0, 0 ] ][128X[104X
    [4X[28X							[ 1, 0, 0, 0 ][128X[104X
    [4X[28X	[ [ 1, 0, 1, 1 ], [ 0, 0, 0, 0 ], [ 0, 1, 1, 0 ], [ 1, 1, 0, 1 ] ][128X[104X
    [4X[28X							[ 1, 1, 0, 1 ][128X[104X
    [4X[28X	[ [ 0, 1, 1, 1 ], [ 1, 0, 1, 1 ], [ 0, 0, 0, 0 ], [ 0, 1, 1, 0 ] ][128X[104X
    [4X[28X							[ 0, 1, 1, 0 ][128X[104X
    [4X[28X	[ [ 1, 0, 1, 1 ], [ 0, 1, 1, 1 ], [ 1, 0, 1, 1 ], [ 0, 0, 0, 0 ] ][128X[104X
    [4X[28X							[ 0, 0, 0, 0 ][128X[104X
    [4X[28X	[ [ 1, 0, 1, 1 ], [ 1, 0, 1, 1 ], [ 0, 1, 1, 1 ], [ 1, 0, 1, 1 ] ][128X[104X
    [4X[28X							[ 1, 0, 1, 1 ][128X[104X
    [4X[28X	[ [ 1, 1, 0, 1 ], [ 1, 0, 1, 1 ], [ 1, 0, 1, 1 ], [ 0, 1, 1, 1 ] ][128X[104X
    [4X[28X							[ 0, 1, 1, 1 ][128X[104X
    [4X[28X[ Z(2)^0, Z(2^2), Z(2^4), 0*Z(2), Z(2^4)^2, Z(2^4)^11 ][128X[104X
    [4X[28X[128X[104X
  [4X[32X[104X
  
  [33X[0;0YExample  of  [10XRunFSR[110X  called  for an lfsr [13Xtest[113X over [22XF_2^4[122X, with initial state
  [13Xist[113X, print switch [13Xtrue[113X for basis [13XB[113X, with 5 nonlinear inputs :[133X
  
  [4X[32X  Example  [32X[104X
    [4X[28X[128X[104X
    [4X[25Xgap>[125X [27Xelmvec := [Z(2^4)^2, Z(2^4)^2, Z(2^2), Z(2^4)^7, Z(2^4)^6];;                                [127X[104X
    [4X[25Xgap>[125X [27XRunFSR(test, ist, elmvec, true);                         [127X[104X
    [4X[28Xusing basis B := [ Z(2)^0, Z(2^4)^7, Z(2^4)^14, Z(2^4)^6 ]	[128X[104X
    [4X[28Xelm		[ 3,	...	...,0 ]  with taps  [ 0 ][128X[104X
    [4X[28X[ 0, 0, 0, 0 ]		[ [ 0, 0, 0, 0 ], [ 0, 1, 1, 0 ], [ 1, 1, 0, 1 ],[128X[104X
    [4X[28X [ 1, 0, 0, 0 ] ]		[ 1, 0, 0, 0 ][128X[104X
    [4X[28X[ 1, 0, 1, 1 ]		[ [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 1, 1, 0 ],[128X[104X
    [4X[28X [ 1, 1, 0, 1 ] ]		[ 1, 1, 0, 1 ][128X[104X
    [4X[28X[ 1, 0, 1, 1 ]		[ [ 1, 1, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],[128X[104X
    [4X[28X [ 0, 1, 1, 0 ] ]		[ 0, 1, 1, 0 ][128X[104X
    [4X[28X[ 1, 1, 0, 1 ]		[ [ 0, 1, 1, 0 ], [ 1, 1, 0, 0 ], [ 0, 0, 0, 0 ],[128X[104X
    [4X[28X [ 0, 0, 0, 0 ] ]		[ 0, 0, 0, 0 ][128X[104X
    [4X[28X[ 0, 1, 0, 0 ]		[ [ 0, 1, 0, 0 ], [ 0, 1, 1, 0 ], [ 1, 1, 0, 0 ],[128X[104X
    [4X[28X [ 0, 0, 0, 0 ] ]		[ 0, 0, 0, 0 ][128X[104X
    [4X[28X[ 0, 0, 0, 1 ]		[ [ 1, 1, 0, 1 ], [ 0, 1, 0, 0 ], [ 0, 1, 1, 0 ],[128X[104X
    [4X[28X [ 1, 1, 0, 0 ] ]		[ 1, 1, 0, 0 ][128X[104X
    [4X[28X[ Z(2^4)^9, Z(2^2), Z(2^4), 0*Z(2), 0*Z(2), Z(2^4)^9 ][128X[104X
    [4X[28X[128X[104X
  [4X[32X[104X
  
  [33X[0;0YIn  both  examples  above  the there is a column [13Xelm[113X, which is in first case
  empty,  because we are not adding nonlinear inputs to the feedback, while in
  the  second  example, this column shows the element being added at each step
  (empty  in  first  row  - the loading step). Also note that the two examples
  above  use  the call [10XLoadFSR[110X, which adds the elm seq[22X{_0}[122X to the sequence, so
  both  sequences  above  are of length [3Xnum+1[103X/[3XLength(elmvec)+1[103X, ie 6. The last
  row  in  both examples is the actual sequence obtained from this run, and is
  kept in Zechs logarithm representation.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[28X[128X[104X
    [4X[25Xgap>[125X [27XRunFSR(test,  ist); Length(last);[127X[104X
    [4X[28X[ Z(2)^0, Z(2^2), Z(2^4), 0*Z(2), Z(2^4)^2, Z(2^4)^11, Z(2^4)^2, Z(2^4)^2,[128X[104X
    [4X[28X Z(2^2), Z(2^4)^7, Z(2^4)^6, Z(2^4)^11, Z(2^2)^2, Z(2^4)^14, Z(2^4)^8,[128X[104X
    [4X[28X  Z(2^4)^3, Z(2^2)^2, Z(2^4)^2, Z(2^4), Z(2^4)^2, Z(2^4)^9 ][128X[104X
    [4X[28X21[128X[104X
    [4X[28X[128X[104X
  [4X[32X[104X
  
  [33X[0;0YLast  example  above  shows a sequence of length 21, ie [3Xthreshold+1[103X, getting
  first  sequence  element  from  LoadFSR  followed by [3Xthreshold[103X iterations of
  StepFSR.[133X
  
  
  [1X2.2 [33X[0;0YLFSR specific funcionality[133X[101X
  
  [1X2.2-1 LFSR[101X
  
  [29X[2XLFSR[102X( [3XF[103X, [3Xcharpol[103X[, [3XB[103X, [3Xtap[103X] ) [32X function
  [29X[2XLFSR[102X( [3XK[103X, [3Xfieldpol[103X, [3Xcharpol[103X[, [3XB[103X, [3Xtap[103X] ) [32X function
  [29X[2XLFSR[102X( [3XF[103X, [3Xcharpol[103X[, [3XB[103X, [3Xtap[103X] ) [32X function
  [29X[2XLFSR[102X( [3Xp[103X, [3Xm[103X, [3Xn[103X[, [3Xtap[103X] ) [32X function
  [6XReturns:[106X  [33X[0;10YAn empty [10XLFSR[110X with components [10Xinit[110X, [10Xstate[110X , [10Xnumsteps[110X and [10Xbasis[110X[133X
  
  [33X[0;0YDifferent  ways to create an [10XLFSR[110X oblject, main difference is in creation of
  the underlying finite field.[133X
  
  [33X[0;0YInputs:[133X
  
  [30X    [33X[0;6Y[3XF[103X  - the underlying finite field (either an extension field or a prime
        field)[133X
  
  [30X    [33X[0;6Y[3XB[103X - basis of F over its prime subfield[133X
  
  [30X    [33X[0;6Y[3Xcharpol[103X - [10XLFSR[110X dfining polynomial[133X
  
  [30X    [33X[0;6Y[3Xfieldpol[103X  -  defifning  polynomial  of  the  extension  field (must be
        irreducible)[133X
  
  [30X    [33X[0;6Y[3Xp[103X - characteeristic[133X
  
  [30X    [33X[0;6Y[3Xm[103X - degree of extension (degree of [3Xfieldpol[103X)[133X
  
  [30X    [33X[0;6Y[3Xn[103X - length of [10XLFSR[110X (degree of [3Xcharpoly[103X)[133X
  
  [30X    [33X[0;6Y[3Xtap[103X  -  optional parameter: the output tap (must be a positive integer
        or a list of positive integers) and will be changed to the default S_0
        if the specified integer is out of [10XLFSR[110X range.[133X
  
  [33X[0;0YCompoents:[133X
  
  [30X    [33X[0;6Y[10Xinit[110X  - [3XFFE[103X vector of length n=deg(charpol), storing the initial state
        of the [10XLFSR[110X, with indeces from n-1, ..., 0[133X
  
  [30X    [33X[0;6Y[10Xstate[110X - [3XFFE[103X vector of length n=deg(charpol), storing the current state
        of the [10XLFSR[110X, with indeces from n-1, ..., 0[133X
  
  [30X    [33X[0;6Y[10Xnumsteps[110X  -  the number of steps performed thus far (initialized to -1
        when  created,  set  to  0  when  loaded  using  [2XLoadFSR[102X  ([14X2.1-5[114X)  and
        incremented by 1 with each step (using [2XStepFSR[102X ([14X2.1-6[114X)))[133X
  
  [30X    [33X[0;6Y[10Xbasis[110X  - basis of F over its prime subfield (if no basis is given this
        field is set to canonical basis of F over its prime subfield)[133X
  
  [33X[0;0YAttributes   [2XFieldPoly[102X   ([14X2.1-2[114X),   [2XUnderlyingFied[102X   ([14X???UnderlyingFied???[114X),
  [10XCharPoly[110X,  [2XFeedbackVec[102X ([14X2.1-2[114X), [2XLength[102X ([14X2.1-3[114X) and [2XOutputTap[102X ([14X2.1-2[114X) and the
  property [10XIsLinearFeedback[110X are set during the construction of an[10XLFSR[110X.[133X
  
  [33X[0;0YIf there is something wrong with the arguments (e.g. attempting to create an
  extension  field  using a reducible poynomial), an error message appears and
  the function returns [10Xfail[110X.[133X
  
  [33X[0;0YExample  below  shows  how  to  create  an  empty [10XLFSR[110X over [22XF_2^4[122X created as
  extension  of  [22XF_2[122X, called [13Xtest[113X, firstly without a specified basis, and then
  with basis [3XB[103X:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[28X[128X[104X
    [4X[25Xgap>[125X [27XK := GF(2);; x := X(K, "x");;[127X[104X
    [4X[25Xgap>[125X [27Xf := x^4 + x^3 + 1;; F := FieldExtension(K, f);; [127X[104X
    [4X[25Xgap>[125X [27Xy := X(F, "y");; l := y^4+ y+ Z(2^4);;[127X[104X
    [4X[25Xgap>[125X [27Xtest := LFSR(K, f, l);[127X[104X
    [4X[28X< empty LFSR given by CharPoly = y^4+y+Z(2^4)>[128X[104X
    [4X[25Xgap>[125X [27XWhichBasis(test);[127X[104X
    [4X[28XCanonicalBasis( GF(2^4) )[128X[104X
    [4X[25Xgap>[125X [27XB := Basis(F, Conjugates(Z(2^4)^3));;  [127X[104X
    [4X[25Xgap>[125X [27Xtest := LFSR(K, f, l, B);[127X[104X
    [4X[28X< empty LFSR given by CharPoly = y^4+y+Z(2^4)>[128X[104X
    [4X[25Xgap>[125X [27XWhichBasis(test);        [127X[104X
    [4X[28XBasis( GF(2^4), [ Z(2^4)^3, Z(2^4)^6, Z(2^4)^12, Z(2^4)^9 ] )[128X[104X
    [4X[28X[128X[104X
  [4X[32X[104X
  
  [1X2.2-2 IsLinearFeedback[101X
  
  [29X[2XIsLinearFeedback[102X( [3Xlfsr[103X ) [32X property
  [29X[2XIsLFSR[102X( [3Xlfsr[103X ) [32X filter
  
  [33X[0;0YIf   we   were  to  represent  the  [3Xlsfr[103X  with  a  multivariate  polynomial,
  DegreeOfPolynomial  would  return  1 - the feedback polynomial is linear and
  [10XIsLinearFeedback[110X  is  set  to  [13Xtrue[113X.  (ie.  only  linear  terms are present:
  monomials with only one variable )[133X
  
  [33X[0;0YFilter [10XIsLFSR[110X is defined as and-filter of [10XIsFSR[110X and [10XIsLinearFeedback[110X.[133X
  
  [1X2.2-3 CharPoly[101X
  
  [29X[2XCharPoly[102X( [3Xlfsr[103X ) [32X attribute
  
  [33X[0;0YAttribute holding the characteristic polynomial (the feedback polynomial).[133X
  
  [1X2.2-4 IsPeriodic[101X
  
  [29X[2XIsPeriodic[102X( [3Xlfsr[103X ) [32X property
  [29X[2XIsUltPeriodic[102X( [3Xlfsr[103X ) [32X property
  [29X[2XIsMaxSeqLFSR[102X( [3Xlfsr[103X ) [32X property
  [29X[2XPeriod[102X( [3Xlfsr[103X ) [32X attribute
  [29X[2XPeriodIrreducible[102X( [3Xlfsr[103X ) [32X method
  [29X[2XPeriodReducible[102X( [3Xlfsr[103X ) [32X method
  
  [33X[0;0YProperties,  attributes and methods concerning the periodicity of the output
  sequence(s), generated by the [3Xlsfr[103X.[133X
  
  [33X[0;0YProperties:[133X
  
  [30X    [33X[0;6Y[10XIsPeriodic[110X:  true  if  constant  term  of  [10XCharPoly[110X  !=  0 (8.11 lidl,
        niederreiter)[133X
  
  [30X    [33X[0;6Y[10XIsUltPeriodic[110X: true if [10XIsLFSR[110X is true (8.7 lidl, niederreiter)[133X
  
  [30X    [33X[0;6Y[10XIsMaxSeqLFSR[110X: true if [10XCharPoly[110X is primitive (ref???)[133X
  
  [33X[0;0YAttributes:[133X
  
  [30X    [33X[0;6Y[10XPeriod[110X: holds the period of the UNKNOWNEntity(LFSR)[133X
  
  [33X[0;0YMethods to compute the period:[133X
  
  [30X    [33X[0;6Y[10XPeriodIrreducible[110X:[133X
  
  [30X    [33X[0;6Y[10XPeriodReducible[110X:[133X
  
  
  [1X2.3 [33X[0;0YNLFSR specific funcionality[133X[101X
  
  [1X2.3-1 ChooseField[101X
  
  [29X[2XChooseField[102X( [3XF[103X ) [32X function
  
  [33X[0;0YWorkaround  for  the  [10XNLFSR[110X  object  definition:  we  need to fix the chosen
  underlying  finite field and prepare indeterminates in the chosen field. The
  indeterminates  will  be  used  for the multivariable polynomial, which will
  define  the [10XNLFSR[110X feedback. Current threshold is set by global [10XMaxNLFSRLen[110X =
  100.[133X
  
  [1X2.3-2 NLFSR[101X
  
  [29X[2XNLFSR[102X( [3XK[103X, [3Xclist[103X, [3Xmlist[103X, [3Xlen[103X[, [3Xtap[103X] ) [32X function
  [29X[2XNLFSR[102X( [3XK[103X, [3Xfieldpol[103X, [3Xclist[103X, [3Xmlist[103X, [3Xlen[103X[, [3Xtap[103X] ) [32X function
  [6XReturns:[106X  [33X[0;10YAn empty [10XNLFSR[110X with components [10Xinit[110X, [10Xstate[110X and [10Xnumsteps[110X[133X
  
  [33X[0;0YDifferent ways to create an [10XNLFSR[110X oblject, main difference is in creation of
  the underlying finite field.[133X
  
  [33X[0;0YNOTE: before creating the [10XNLFSR[110X, we must always create the indeterminates to
  be  used  for  the  feedback  using  [10XChooseField[110X function call!!! please see
  example below[133X
  
  [33X[0;0YInputs:[133X
  
  [30X    [33X[0;6Y[3XF[103X  - the underlying finite field (either an extension field or a prime
        field)[133X
  
  [30X    [33X[0;6Y[3Xfieldpol[103X  -  defifning  polynomial  of  the  extension  field (must be
        irreducible)[133X
  
  [30X    [33X[0;6Y[3Xclist[103X - list of coefficients for the monomials in [3Xmlist[103X[133X
  
  [30X    [33X[0;6Y[3Xmlist[103X - list of monomials[133X
  
  [30X    [33X[0;6Y[3Xlen[103X - length of [10XNLFSR[110X[133X
  
  [30X    [33X[0;6Y[3Xtap[103X  -  optional parameter: the output tap (must be a positive integer
        or a list of positive integers) and will be changed to the default S_0
        if the specified integer is out of [10XNLFSR[110Xrange.[133X
  
  [33X[0;0YNOTE:  [3Xclist[103X  and  [3Xmlist[103X  must be of same length, all elements in [3Xclist[103X must
  belong  to  the  underlying  field.  Monomials in [3Xmlist[103X must not include any
  indeterminates  that  are out of range specified by [3Xlen[103X: stages of [10XNLFSR[110X are
  represented by indeterminants and the feedback is not allowed to use a stage
  that  doesnt  exist.  A  second  constraint  on  [3Xmlist[103X requires that it must
  contain  at  least  one  monomial of degree [22X>[122X 1, otherwise we must create an
  [10XLFSR[110X.[133X
  
  [33X[0;0YCompoents:[133X
  
  [30X    [33X[0;6Y[10Xinit[110X  - [3XFFE[103X vector of length n=deg(charpol), storing the initial state
        of the [10XNLFSR[110X, with indeces from n-1, ..., 0[133X
  
  [30X    [33X[0;6Y[10Xstate[110X - [3XFFE[103X vector of length n=deg(charpol), storing the current state
        of the [10XNLFSR[110X, with indices from n-1, ..., 0[133X
  
  [30X    [33X[0;6Y[10Xnumsteps[110X  -  the number of steps performed thus far (initialized to -1
        when  created,  set  to  0  when  loaded  using  [2XLoadFSR[102X  ([14X2.1-5[114X)  and
        incremented by 1 with each step (using [2XStepFSR[102X ([14X2.1-6[114X)))[133X
  
  [33X[0;0YAttributes   [2XFieldPoly[102X   ([14X2.1-2[114X),   [2XUnderlyingFied[102X   ([14X???UnderlyingFied???[114X),
  [10XMultivarPoly[110X,  [2XFeedbackVec[102X  ([14X2.1-2[114X),  [2XIndetList[102X  ([14X2.3-4[114X), [2XLength[102X ([14X2.1-3[114X) and
  [2XOutputTap[102X  ([14X2.1-2[114X)  and  the property [10XIsNonLinearFeedback[110X are set during the
  construction of an [10XNLFSR[110X.[133X
  
  [33X[0;0YIf there is something wrong with the arguments (e.g. attempting to create an
  extension  field  using a reducible poynomial), an error message appears and
  the function returns [10Xfail[110X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[28X[128X[104X
    [4X[25Xgap>[125X [27X F := GF(2);;  clist := [One(F), One(F)];; mlist := [x_0*x_1, x_2];;[127X[104X
    [4X[28XError, Variable: 'x_0' must have a value[128X[104X
    [4X[28Xnot in any function at line 2 of *stdin*[128X[104X
    [4X[25Xgap>[125X [27Xtest := NLFSR(F, clist, mlist, 3);[127X[104X
    [4X[28XError, Variable: 'mlist' must have a value[128X[104X
    [4X[28Xnot in any function at line 3 of *stdin*[128X[104X
    [4X[25Xgap>[125X [27XChooseField(F);[127X[104X
    [4X[28XYou can now create an NLFSR with up to 100 stages[128X[104X
    [4X[28Xwith up to  100 nonzero terms[128X[104X
    [4X[25Xgap>[125X [27Xmlist := [x_0*x_1, x_2];;                                           [127X[104X
    [4X[25Xgap>[125X [27Xtest := NLFSR(F, clist, mlist, 3);[127X[104X
    [4X[28X< empty NLFSR of length 3,[128X[104X
    [4X[28X given by MultivarPoly = x_0*x_1+x_2> [128X[104X
    [4X[28X[128X[104X
  [4X[32X[104X
  
  [1X2.3-3 IsNonLinearFeedback[101X
  
  [29X[2XIsNonLinearFeedback[102X( [3Xnlfsr[103X ) [32X property
  [29X[2XIsNLFSR[102X( [3Xnlfsr[103X ) [32X filter
  
  [33X[0;0YFor the multivariate polynomial given by [3Xclist[103X and [3Xmlist[103X, DegreeOfPolynomial
  greter  than  1  sets [10XIsNonLinearFeedback[110X to [13Xtrue[113X. otherwise it prints out a
  warning that you need to use the [10XLFSR[110X constructor instead.[133X
  
  [33X[0;0YFilter [10XIsNLFSR[110X is defined as and-filter of [10XIsFSR[110X and [10XIsNonLinearFeedback[110X.[133X
  
  [33X[0;0YNOTE:  at  the  same  time  [10XIsLinearFeedback[110X  is  set  to  [13Xfalse[113X (for coding
  purposes).[133X
  
  [1X2.3-4 MultivarPoly[101X
  
  [29X[2XMultivarPoly[102X( [3Xnlfsr[103X ) [32X attribute
  [29X[2XIndetList[102X( [3Xnlfsr[103X ) [32X attribute
  
  [33X[0;0Y[10XMultivarPoly[110X  holds  the  multivariate function defining the feedback of the
  [10XNLFSR[110X.   [10XIndetList[110X   holds  all  the  indeterminates  that  are  present  in
  [10XMultivarPoly[110X and [10XFeedbackVec[110X holds only the nonzero coefficients (as opposed
  to the [10XLFSR[110X, where this field holds coefficients for all stages of the [10XFSR[110X).
  The feedback element is computed from [10XMultivarPoly[110X, [10XIndetList[110X and [10Xstate[110X, and
  not from [10XFeedbackVec[110X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[28X[128X[104X
    [4X[25Xgap>[125X [27XMultivarPoly(test); IndetList(test);[127X[104X
    [4X[28Xx_0*x_1+x_2[128X[104X
    [4X[28X[ 0, 1, 2 ][128X[104X
    [4X[28X[128X[104X
  [4X[32X[104X
  
